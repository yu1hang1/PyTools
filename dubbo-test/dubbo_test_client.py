# -*- coding:utf-8 -*-
# @Time : 2020/4/9 下午7:40
# @Author: hang.yu06
# @File : dubbo_test_client.py


null = None
true = True
false = False
from pyhessian.client import HessianProxy
# 从pyhessian导入HessianProxy，用它来发请求
from pyhessian import protocol


# 这个是用来进行把咱们python的数据类型序列化成二进制的

def dubbo_api(url_interface, method, param_obj, **kwargs):
	'''
	:param url: url地址
	:param interface: 接口名称，因为这里可能还有别的服务要测，接口名不一样，这里定义成变量
	:param method: 调用哪个方法
	:param param_obj: 入参的对象
	:param kwargs: 这个用关键字参数，因为每个接口的参数都不一样，不固定，所以这里用关键字参数
	:return:
		'''
	req_param = protocol.object_factory(param_obj, **kwargs)
	# 这个是用来构造二进制的入参的，也就是把入参序列化
	# try:  # 用try捕捉一下异常
	req_obj = HessianProxy(url_interface, timeout=60)
	print(req_obj)
	# 这个req是生成一个请求对象
	res = req_obj.queryAttachedShelfLocationByShopLayoutId(139664)
	# res = getattr(req_obj, method)(req_param)
	# getattr是python的内置方法，获取对象的方法，咱们从构造的请求对象里面获取到方法，然后调用，把前面生成的
	# 序列化好的参数传进去，然后获取到返回的数据
	# except Exception as e:
	# 	print('有异常了，异常信息是：%s' % e)
	# 	res = {"msg": "异常：%s" % e, "code": 500}
	# # 这个是自己定义的异常，如果调用出错了，就返回这个
	return res


if __name__ == '__main__':
	url_interface = 'http://10.225.187.20:20881/com.opc.display.api.remote.AttachedShelfRemote'
	# method = 'queryShelfSnapByCondition'
	# param_obj = 'com.opc.display.core.api.remote.query.ShelfSnapQueryParam'
	# params = {"ids": [55919229, 56772592, 56772593, 56772594, 56772595, 56772596]}
	# # 这个入参，为了不定义多个变量，咱们把它写成字典形式的,就和stu=dubbo这种方式调用是一样的
	# over = dubbo_api(url_interface, method, param_obj, **params)
	# # 测试调用一下
	# print(over)  # 打印结果
	a =[3600060730744041,3600060701957259,3600060727840655,3600060724793010,3600060674224607,3600060668797477,3600060733511585,3600060701557413,3600060709185325,3600060730068931,3600060714674573,3600060672206395,3600060711741098,3600060722127001,3600060695745926,3600060722816334,3600060729505893,3600060711365049,3600060673122407,3600060722950921,3600060693871674,3600060697853028,3600060725446632,3600060682419237,3600060684605163,3600060705146489,3600060694275929,3600060676524120,3600060699418276,3600060678050485,3600060680508687,3600060708643267,3600060711504743,3600060727033944,3600060698693283,3600060699484106,3600060678294133,3600060682625948,3600060689807950,3600060687711382,3600060667803335,3600060732267171,3600060690685387,3600060733080940,3600060669839134,3600060729164448,3600060688611330,3600060677758656,3600060685664625,3600060671397936,3600060693587179,3600060675041915,3600060724014456,3600060720450754,3600060727989856,3600060682085457,3600060668848906,3600060667305898,3600060730750036,3600060677348671,3600060705663381,3600060727227518,3600060715335665,3600060678350161,3600060732861216,3600060683910422,3600060683513063,3600060716140759,3600060729398039,3600060704732549,3600060720262919,3600060695440312,3600060709070725,3600060713021044,3600060680975159,3600060683349467,3600060716244933,3600060728748853,3600060708539774,3600060721605953,3600060684085650,3600060726896717,3600060710406992,3600060674870508,3600060708734946,3600060713030413,3600060681273009,3600060695321462,3600060700437510,3600060705461120,3600060682979979,3600060704462811,3600060675155151,3600060722840624,3600060687561080,3600060721437225,3600060688019038,3600060722840628,3600060693489242,3600060673844148,3600060689662501,3600060674586841,3600060678984552,3600060703417393,3600060728915518,3600060695334650,3600060674811545,3600060715415857,3600060689989035,3600060716127948,3600060714545050,3600060671660913,3600060674551721,3600060680160073,3600060716709088,3600060693759661,3600060721599920,3600060715736560,3600060725455959,3600060678033181,3600060679442221,3600060687927429,3600060718608892,3600060679819057,3600060704231486,3600060701066820,3600060670843592,3600060729981515,3600060677537982,3600060710043517,3600060692907985]
	print(len(a))
